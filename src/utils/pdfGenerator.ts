
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

interface ReportData {
  jobRole: string;
  interviewDate: string;
  overallScore: number;
  strengths: string[];
  improvements: string[];
  questions: string[];
  answers: string[];
}

export const generatePdfReport = (data: ReportData) => {
  try {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    
    // Add title
    doc.setFontSize(20);
    doc.setTextColor(30, 58, 138); // Dark blue
    doc.text('Interview AI Report', pageWidth / 2, 20, { align: 'center' });
    
    // Add job role and date
    doc.setFontSize(12);
    doc.setTextColor(100, 100, 100);
    doc.text(`Position: ${data.jobRole}`, 20, 30);
    
    const formattedDate = new Date(data.interviewDate).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
    
    doc.text(`Date: ${formattedDate}`, 20, 38);
    
    // Add overall score
    doc.setFontSize(16);
    doc.setTextColor(30, 58, 138);
    doc.text('Overall Score', 20, 50);
    
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text(`${data.overallScore}/100`, 20, 58);
    
    // Add strengths section
    doc.setFontSize(16);
    doc.setTextColor(30, 58, 138);
    doc.text('Key Strengths', 20, 70);
    
    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    data.strengths.forEach((strength, index) => {
      doc.text(`• ${strength}`, 25, 80 + (index * 8));
    });
    
    // Add improvements section
    const improvementsY = 85 + (data.strengths.length * 8);
    doc.setFontSize(16);
    doc.setTextColor(30, 58, 138);
    doc.text('Areas for Improvement', 20, improvementsY);
    
    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    data.improvements.forEach((improvement, index) => {
      doc.text(`• ${improvement}`, 25, improvementsY + 10 + (index * 8));
    });
    
    // Add questions and answers section
    const questionsY = improvementsY + 20 + (data.improvements.length * 8);
    doc.setFontSize(16);
    doc.setTextColor(30, 58, 138);
    doc.text('Interview Questions & Answers', 20, questionsY);
    
    // Create table data
    const tableData = data.questions.map((question, index) => {
      const answer = data.answers[index] || 'No answer provided';
      return [
        `Q${index + 1}: ${question}`,
        answer.length > 100 ? answer.substring(0, 100) + '...' : answer
      ];
    });
    
    // Add table
    autoTable(doc, {
      startY: questionsY + 5,
      head: [['Question', 'Answer']],
      body: tableData,
      theme: 'striped',
      headStyles: {
        fillColor: [30, 58, 138],
        textColor: [255, 255, 255],
        fontStyle: 'bold'
      },
      styles: {
        overflow: 'linebreak',
        cellWidth: 'wrap'
      },
      columnStyles: {
        0: { cellWidth: 80 },
        1: { cellWidth: 110 }
      }
    });
    
    // Add footer
    // Fix: Using internal.pages.length instead of getNumberOfPages
    const pageCount = doc.internal.pages.length - 1;
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(10);
      doc.setTextColor(150, 150, 150);
      doc.text(
        'Generated by Interview AI - Your AI Interview Assistant',
        pageWidth / 2,
        doc.internal.pageSize.getHeight() - 10,
        { align: 'center' }
      );
    }
    
    // Save the PDF
    doc.save(`InterviewAI_Report_${new Date().toISOString().split('T')[0]}.pdf`);
    
    return true;
  } catch (error) {
    console.error('Error generating PDF:', error);
    return false;
  }
};
